#!/bin/bash

set -euo pipefail

if [[ "$(id -u)" -ne 0 ]]; then
    printf "%s must be run as root\n" "$(basename "${0}")"
    exit 1
fi

server_user="hlds"
server_conf="/etc/hlds/cs16-server.conf"
server_workdir="/home/${server_user}/.steam"

_check_pre_start() {
    if [[ ! -f "${server_conf}" ]]; then
        printf "Error: Configuration file %s not found\n" "${server_conf}"
        exit 1
    elif [[ ! -x "${server_workdir}/cs16/hlds_run" ]]; then
        printf "Error: Required file %s not found/executable\n" "${server_workdir}/cs16/hlds_run}"
        exit 1
    fi
}

_check_pre_update() {
    if [[ ! -x "${server_workdir}/steamcmd.sh" ]]; then
        printf "Error: Required file %s not found/executable\n" "${server_workdir}/steamcmd.sh}"
        exit 1
    fi
}

_is_server_running() {
    pgrep -u "${server_user}" hlds_ &> /dev/null
}

_is_server_updating() {
    pgrep -u "${server_user}" steamcmd &> /dev/null
}

_start_hlds() {
    source "${server_conf}"
    su "${server_user}" -c "cd ${server_workdir}/cs16 && \
        ./hlds_run ${server_game:-} ${server_params:-} ${server_dll:-} &> /dev/null &"
}

_kill_hlds() {
    timeout_stop=10
    su "${server_user}" -c "pkill -u ${server_user} -SIGINT hlds_" || true
    for ((i=0; i<timeout_stop; i++)); do
        if ! _is_server_running; then
            return 0
        fi
        sleep 1
    done
    su "${server_user}" -c "pkill -u ${server_user} -SIGKILL hlds_" || true
    printf "Warning: Server was forcefully terminated\n"
}

_update_hlds() {
    if ! su "${server_user}" -c "cd ${server_workdir} && \
        ./steamcmd.sh +force_install_dir cs16 +login anonymous +app_update 90 validate +quit"; then
        printf "Error: Server update failed\n"
        exit 1
    fi
}

start_server() {
    _check_pre_start
    if _is_server_updating; then
        printf "Server is being updated, wait for it to finish\n"
        exit 1
    elif _is_server_running; then
        printf "Server is already running\n"
        exit 1
    fi
    printf "Starting server\n"
    _start_hlds
}

stop_server() {
    if _is_server_updating; then
        printf "Server is being updated, wait for it to finish\n"
        exit 1
    elif ! _is_server_running; then
        printf "Server is not running\n"
        exit 1
    fi
    printf "Stopping server\n"
    _kill_hlds
}

restart_server() {
    _check_pre_start
    if _is_server_updating; then
        printf "Server is being updated, wait for it to finish\n"
        exit 1
    elif _is_server_running; then
        printf "Restarting server\n"
        _kill_hlds
    else
        printf "Starting server\n"
    fi
    _start_hlds
}

update_server() {
    _check_pre_update
    if _is_server_updating; then
        printf "Server is already being updated, wait for it to finish\n"
        exit 1
    elif _is_server_running; then
        printf "Server is running, stop it first\n"
        exit 1
    fi
    printf "Updating server\n"
    _update_hlds
}

status_server() {
    if _is_server_updating; then
        printf "Server is being updated\n"
    elif _is_server_running; then
        pid="$(pgrep -u "${server_user}" hlds_run)"
        printf "Server is running (PID: %d)\n" "${pid}"
        printf "Uptime: %s\n" "$(ps -o etimes= -p "${pid}" | awk '{print int($1/3600)"h "int(($1%3600)/60)"m "($1%60)"s"}')"
        printf "Command line: %s\n" "$(pgrep -a hlds_linux | awk '{for(i=2;i<=NF;i++) printf $i" "}')"
    else
        printf "Server is not running\n"
    fi
}

print_help() {
    printf "Usage: %s [start | stop | restart | update | status]\n" "$(basename "${0}")"
}

case "${1:-}" in
    "start")
        start_server
        ;;
    "stop")
        stop_server
        ;;
    "restart")
        restart_server
        ;;
    "update")
        update_server
        ;;
    "status")
        status_server
        ;;
    "")
        print_help
        ;;
    *)
        printf "Invalid option %s\n" "${1}"
        print_help
        exit 1
        ;;
esac
