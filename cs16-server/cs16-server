#!/bin/bash

if [[ "$(id -u)" -ne 0 ]]; then
    echo "Run this script as root"
    exit 1
fi

server_user="hlds"
server_conf="/etc/hlds/cs16-server.conf"
server_workdir="/home/${server_user}/.steam"

_read_conf() {
    source "${server_conf}"
}

_start_hlds() {
    su "${server_user}" -c "cd ${server_workdir}/cs16 && ./hlds_run ${server_game:-} ${server_params:-} ${server_dll:-} > /dev/null 2>&1 &"
}

_kill_hlds() {
    su "${server_user}" -c "pkill -u ${server_user} -SIGINT hlds_ > /dev/null 2>&1"
}

_update_hlds() {
    su "${server_user}" -c "cd ${server_workdir} && ./steamcmd.sh +force_install_dir cs16 +login anonymous +app_update 90 validate +quit"
}

_hlds_check() {
    if pgrep -u "${server_user}" steamcmd > /dev/null 2>&1; then
        echo "Server is being updated"
        echo "Wait for it to finish"
        exit 1
    fi

    pgrep -u "${server_user}" hlds_ > /dev/null 2>&1
}

start_server() {
    if _hlds_check; then
        echo "Server is already running"
        exit 1
    fi
    echo "Starting server"
    _read_conf && _start_hlds
}

stop_server() {
    if ! _hlds_check; then
        echo "Server is not running"
        exit 1
    fi
    echo "Stopping server"
    _kill_hlds
}

restart_server() {
    if _hlds_check; then
        echo "Restarting server"
        _kill_hlds
    else
        echo "Starting server"
    fi
    _read_conf && _start_hlds
}

update_server() {
    if _hlds_check; then
        echo "Stop server first"
        exit 1
    fi
    echo "Updating server"
    _update_hlds
}

status_server() {
    if _hlds_check; then
        echo "Server is running with the following args:"
        pgrep -a hlds_linux | awk '{ print substr($0, index($0, $2)) }'
    else
        echo "Server is not running"
    fi
}

print_help() {
    echo "Usage: $(basename "$0") [start | restart | stop | update | status]"
}

case "$1" in
    start)
        start_server
        ;;
    restart)
        restart_server
        ;;
    stop)
        stop_server
        ;;
    update)
        update_server
        ;;
    status)
        status_server
        ;;
    "")
        print_help
        ;;
    *)
        echo "Invalid option $1"
        print_help
        exit 1
        ;;
esac
